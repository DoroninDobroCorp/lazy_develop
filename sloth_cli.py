# –§–∞–π–ª: sloth_cli.py
import os
import sys
import time
import re
import json
import platform
import subprocess
from colors import Colors
import sloth_core
import sloth_runner
import context_collector

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---
MAX_ITERATIONS = 15
CONTEXT_SCRIPT = 'AskGpt.py' # –û—Å—Ç–∞–≤–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ context_collector –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
CONTEXT_FILE = 'message_1.txt'
HISTORY_FILE = 'sloth_history.json'
RUN_LOG_FILE = 'sloth_run.log'

def calculate_cost(model_name, input_tokens, output_tokens):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API, —É—á–∏—Ç—ã–≤–∞—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
    """
    pricing_info = sloth_core.MODEL_PRICING.get(model_name)
    if not pricing_info:
        return 0.0

    total_cost = 0.0
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    input_tiers = pricing_info.get("input", {}).get("tiers", [])
    for tier in input_tiers:
        if input_tokens <= tier["up_to"]:
            total_cost += (tier["price"] / 1_000_000) * input_tokens
            break

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –í–•–û–î–ê)
    output_tiers = pricing_info.get("output", {}).get("tiers", [])
    for tier in output_tiers:
        if input_tokens <= tier["up_to"]: 
            total_cost += (tier["price"] / 1_000_000) * output_tokens
            break
            
    return total_cost

# --- –£–¢–ò–õ–ò–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---

def get_project_context():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å."""
    print(f"{Colors.CYAN}üîÑ –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π, —á–∏—Å—Ç—ã–π —Å–ø–æ—Å–æ–±
        context_data = context_collector.gather_project_context(os.getcwd())
        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        return context_data
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{Colors.ENDC}")
        return None

def _log_run(title, content):
    """–ü–∏—à–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞. –û–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ –≤–µ—Å—å –∑–∞–ø—É—Å–∫, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    try:
        with open(RUN_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write("\n" + "="*80 + "\n")
            f.write(f"{title}\n")
            f.write("-"*80 + "\n")
            if content is None:
                content = "<empty>"
            f.write(str(content) + "\n")
            f.write("="*80 + "\n")
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ {RUN_LOG_FILE}: {e}{Colors.ENDC}")

def _read_multiline_input(prompt):
    """–ß–∏—Ç–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print(prompt)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line:
                lines.append(line)
                empty_line_count = 0
            else:
                empty_line_count += 1
        except EOFError:
            break
    return '\n'.join(lines).strip()

def get_user_input():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª—å –∏ –ª–æ–≥ –æ—à–∏–±–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    goal_prompt = (
        f"{Colors.HEADER}{Colors.BOLD}üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å.{Colors.ENDC}\n"
        f"{Colors.CYAN}üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–µ–Ω –∏ –¥–µ—Ç–∞–ª–µ–Ω.\n"
        f"(–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}"
    )
    user_goal = _read_multiline_input(goal_prompt)

    if not user_goal:
        return None, None

    log_prompt = f"\n{Colors.HEADER}{Colors.BOLD}üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}"
    error_log = _read_multiline_input(log_prompt)

    return user_goal, error_log

def extract_todo_block(text):
    match = re.search(r"```bash\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_summary_block(text):
    match = re.search(r"```summary\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_manual_steps_block(text):
    match = re.search(r"```manual\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_done_summary_block(text):
    match = re.search(r"```done_summary\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def save_completion_history(goal, summary):
    history_data = {"previous_attempts": []}
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history_data = json.load(f)
        except json.JSONDecodeError:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.{Colors.ENDC}")

    new_entry = {
        "initial_goal": goal,
        "solution_summary": summary
    }
    history_data.get("previous_attempts", []).insert(0, new_entry)

    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, ensure_ascii=False)
        print(f"{Colors.OKGREEN}üíæ –õ–û–ì: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {HISTORY_FILE}.{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è: {e}{Colors.ENDC}")

def load_fix_history():
    if not os.path.exists(HISTORY_FILE):
        return None
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            history_data = json.load(f)
        
        attempts = history_data.get("previous_attempts", [])
        if not attempts:
            return None
        
        last_attempt = attempts[0]
        
        text_history = (
            f"–≠—Ç–æ —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π:\n"
            f"  - –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {last_attempt.get('initial_goal', 'N/A')}\n"
            f"  - –¢–≤–æ–µ '—Ä–µ—à–µ–Ω–∏–µ': {last_attempt.get('solution_summary', 'N/A')}"
        )
        return text_history
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_FILE}: {e}{Colors.ENDC}")
        return None

def notify_user(message):
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message.replace(Colors.ENDC, '')}{Colors.ENDC}")
    system = platform.system()
    try:
        if system == "Darwin":
            subprocess.run(['afplay', '/System/Library/Sounds/Sosumi.aiff'], check=True, timeout=5)
        elif system == "Linux":
            subprocess.run(['zenity', '--info', '--text', message, '--title', 'Sloth Script', '--timeout=10', '--window-icon=info'], check=True, timeout=10)
        elif system == "Windows":
            command = f'powershell -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show(\'{message}\', \'Sloth Script\');"'
            subprocess.run(command, shell=True, check=True, timeout=30)
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}.{Colors.ENDC}")

# --- –ì–õ–ê–í–ù–´–ô –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ô –¶–ò–ö–õ ---
def main(is_fix_mode=False):
    sloth_core.initialize_model()
    model_instance, active_service = sloth_core.get_active_service_details()

    if not model_instance:
        return f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å. –í—ã—Ö–æ–¥.{Colors.ENDC}"

    total_cost = 0.0
    initial_phase_cost = 0.0
    fix_phase_cost = 0.0
    cost_log = []
    
    current_phase = "Fix" if is_fix_mode else "Initial"

    user_goal, error_log = get_user_input()
    if not user_goal:
        return f"{Colors.WARNING}–¶–µ–ª—å –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}"
    
    initial_task = user_goal + (f"\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò ---\n{error_log}" if error_log else "")
    project_context = get_project_context()
    if not project_context:
        return f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.{Colors.ENDC}"
    
    current_prompt = sloth_core.get_initial_prompt(project_context, initial_task, load_fix_history() if is_fix_mode else None)
    attempt_history = []
    final_message = ""
    
    iteration_count = 1
    while iteration_count <= MAX_ITERATIONS:
        model_instance, active_service = sloth_core.get_active_service_details()
        print(f"\n{Colors.BOLD}{Colors.HEADER}üöÄ --- –≠–¢–ê–ü: {current_phase} | –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} (API: {active_service}) ---{Colors.ENDC}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –ó–ê–ü–†–û–° –í –ú–û–î–ï–õ–¨", current_prompt)
        answer_data = sloth_core.send_request_to_model(model_instance, active_service, current_prompt, iteration_count)
        if not answer_data:
            if sloth_core.model:
                print(f"{Colors.WARNING}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...{Colors.ENDC}")
                print(f"{Colors.WARNING}‚è∏Ô∏è  –õ–û–ì: –ü–∞—É–∑–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...{Colors.ENDC}")
                time.sleep(5)
                continue
            else:
                final_message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ API."
                break
        
        iteration_cost = calculate_cost(sloth_core.MODEL_NAME, answer_data["input_tokens"], answer_data["output_tokens"])
        total_cost += iteration_cost
        if current_phase == "Fix": fix_phase_cost += iteration_cost
        else: initial_phase_cost += iteration_cost
        
        cost_log.append({
            "phase": current_phase, "iteration": iteration_count, "model": sloth_core.MODEL_NAME, 
            "cost": iteration_cost, "input": answer_data["input_tokens"], "output": answer_data["output_tokens"]
        })
        print(f"{Colors.GREY}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Ö–æ–¥: {answer_data['input_tokens']} —Ç., –í—ã—Ö–æ–¥: {answer_data['output_tokens']} —Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${iteration_cost:.6f}{Colors.ENDC}")
        
        answer_text = answer_data["text"]
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò (RAW)", answer_text)

        if answer_text.strip().upper().startswith("–ì–û–¢–û–í–û"):
            done_summary = extract_done_summary_block(answer_text)
            manual_steps = extract_manual_steps_block(answer_text)
            final_message = f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–∑–∞ {iteration_count} –∏—Ç–µ—Ä–∞—Ü–∏–π){Colors.ENDC}"
            if done_summary:
                save_completion_history(user_goal, done_summary)
                print(f"{Colors.OKGREEN}üìÑ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï:\n{Colors.CYAN}{done_summary}{Colors.ENDC}")
                _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: DONE SUMMARY", done_summary)
            if manual_steps:
                 final_message += f"\n\n{Colors.WARNING}‚úã –¢–†–ï–ë–£–Æ–¢–°–Ø –†–£–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:{Colors.ENDC}\n{manual_steps}"
                 _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: MANUAL STEPS", manual_steps)
            break

        commands_to_run = extract_todo_block(answer_text)
        if not commands_to_run:
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥. –ü—Ä–æ–±—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.{Colors.ENDC}")
            current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history)
            iteration_count += 1
            continue

        strategy_description = extract_summary_block(answer_text) or "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –æ–ø–∏—Å–∞–Ω–∞."
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
        _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –°–¢–†–ê–¢–ï–ì–ò–Ø", strategy_description)
        _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –ö–û–ú–ê–ù–î–´ –ö –í–´–ü–û–õ–ù–ï–ù–ò–Æ (bash)", commands_to_run)
        # –ù–µ –∑–∞—Å–æ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å —Å–∞–º–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        print(f"\n{Colors.OKBLUE}üîß –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ shell-–∫–æ–º–∞–Ω–¥. –ü—ã—Ç–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å...{Colors.ENDC}")

        success, failed_command, error_message = sloth_runner.execute_commands(commands_to_run)
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        if success:
            _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î", "–£–°–ü–ï–•")
        else:
            _log_run(f"–ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}: –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î", f"–ü–†–û–í–ê–õ\n–û—à–∏–±–∫–∞: {error_message}\n–ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è –±–ª–æ–∫:\n{failed_command}")
        
        project_context = get_project_context()
        if not project_context: 
            final_message = f"{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"
            break

        history_entry = f"**–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}:**\n**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
        if success:
            history_entry += "**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–°–ü–ï–•"
            current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history)
        else:
            history_entry += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ\n**–û—à–∏–±–∫–∞:** {error_message}"
            current_prompt = sloth_core.get_error_fixing_prompt(failed_command, error_message, user_goal, project_context, iteration_count + 1, attempt_history)
        
        attempt_history.append(history_entry)
        iteration_count += 1
    
    if not final_message:
        final_message = f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Colors.ENDC}"
    
    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–û–ò–ú–û–°–¢–ò ---{Colors.ENDC}")
    for entry in cost_log:
        print(f"  –§–∞–∑–∞: {entry['phase']:<8} | –ò—Ç–µ—Ä–∞—Ü–∏—è: {entry['iteration']:<2} | –ú–æ–¥–µ–ª—å: {entry['model']:<20} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${entry['cost']:.6f}")
    
    if fix_phase_cost > 0:
        print(f"\n  –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞: ${initial_phase_cost:.6f}")
        print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–∞–ø–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fix_phase_cost:.6f}")
    
    print(f"{Colors.BOLD}\n  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: ${total_cost:.6f}{Colors.ENDC}")

    return final_message

if __name__ == "__main__":
    is_fix_mode = '--fix' in sys.argv
    
    if not is_fix_mode and os.path.exists(HISTORY_FILE):
        try: 
            os.remove(HISTORY_FILE)
            print(f"{Colors.CYAN}üóëÔ∏è  –õ–û–ì: –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è ({HISTORY_FILE}).{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {e}{Colors.ENDC}")
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞
    try:
        with open(RUN_LOG_FILE, 'w', encoding='utf-8') as f:
            f.write("# SLOTH RUN LOG\n")
            f.write(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} | Python: {platform.python_version()}\n")
            f.write("–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ.\n")
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {RUN_LOG_FILE}: {e}{Colors.ENDC}")
    
    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try:
        final_status = main(is_fix_mode)
    except KeyboardInterrupt:
        final_status = f"{Colors.OKBLUE}üîµ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        import traceback
        traceback.print_exc()
        final_status = f"{Colors.FAIL}‚ùå –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}")
        notify_user(final_status)
        print(f"\n{Colors.BOLD}üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}")