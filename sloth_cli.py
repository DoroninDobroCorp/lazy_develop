# –§–∞–π–ª: sloth_cli.py
import os
import sys
import time
import re
import json
import platform
import subprocess
import argparse
from tkinter import Tk, filedialog

from colors import Colors
import sloth_core
import sloth_runner
import context_collector

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---
MAX_ITERATIONS = 20
HISTORY_FILE_NAME = 'sloth_history.json'
RUN_LOG_FILE_NAME = 'sloth_run.log'

def calculate_cost(model_name, input_tokens, output_tokens):
    pricing_info = sloth_core.MODEL_PRICING.get(model_name)
    if not pricing_info: return 0.0
    total_cost = 0.0
    input_tiers = pricing_info.get("input", {}).get("tiers", [])
    for tier in input_tiers:
        if input_tokens <= tier["up_to"]:
            total_cost += (tier["price"] / 1_000_000) * input_tokens
            break
    output_tiers = pricing_info.get("output", {}).get("tiers", [])
    for tier in output_tiers:
        if input_tokens <= tier["up_to"]: 
            total_cost += (tier["price"] / 1_000_000) * output_tokens
            break
    return total_cost

def get_project_context(is_fast_mode, files_to_include_fully=None):
    print(f"{Colors.CYAN}üîÑ –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}")
    try:
        if is_fast_mode:
            context_data = context_collector.gather_project_context(os.getcwd(), mode='full')
        else:
            mode = 'summarized'
            context_data = context_collector.gather_project_context(os.getcwd(), mode=mode, full_content_files=files_to_include_fully)
        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        return context_data
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{Colors.ENDC}")
        return None

def _log_run(log_file_path, title, content):
    try:
        with open(log_file_path, 'a', encoding='utf-8') as f:
            f.write("\n" + "="*80 + "\n" + f"{title}\n" + "-"*80 + "\n")
            f.write(str(content if content is not None else "<empty>") + "\n")
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ {log_file_path}: {e}{Colors.ENDC}")

def _read_multiline_input(prompt):
    print(prompt)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line: lines.append(line); empty_line_count = 0
            else: empty_line_count += 1
        except EOFError: break
    return '\n'.join(lines).strip()

def get_user_input():
    goal_prompt = (f"{Colors.HEADER}{Colors.BOLD}üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å.{Colors.ENDC}\n"
                   f"{Colors.CYAN}üí° (–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}")
    user_goal = _read_multiline_input(goal_prompt)
    if not user_goal: return None, None
    log_prompt = (f"\n{Colors.HEADER}{Colors.BOLD}üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}")
    error_log = _read_multiline_input(log_prompt)
    return user_goal, error_log

def extract_block(tag, text):
    match = re.search(fr"```{tag}\s*(.*?)\s*```", text, re.DOTALL)
    return match.group(1).strip() if match else None

def update_history_with_attempt(history_file_path, goal, summary):
    try:
        with open(history_file_path, 'r+', encoding='utf-8') as f:
            history_data = json.load(f)
            new_entry = {"initial_goal": goal, "solution_summary": summary}
            history_data.setdefault("previous_attempts", []).insert(0, new_entry)
            f.seek(0); json.dump(history_data, f, indent=2, ensure_ascii=False); f.truncate()
        print(f"{Colors.OKGREEN}üíæ –õ–û–ì: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}")
    except (IOError, json.JSONDecodeError) as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è: {e}{Colors.ENDC}")

def load_fix_history(history_file_path):
    if not os.path.exists(history_file_path): return None
    try:
        with open(history_file_path, 'r', encoding='utf-8') as f: history_data = json.load(f)
        attempts = history_data.get("previous_attempts", [])
        if not attempts: return None
        last_attempt = attempts[0]
        return (f"–≠—Ç–æ —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π:\n"
                f"  - –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {last_attempt.get('initial_goal', 'N/A')}\n"
                f"  - –¢–≤–æ–µ '—Ä–µ—à–µ–Ω–∏–µ': {last_attempt.get('solution_summary', 'N/A')}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path}: {e}{Colors.ENDC}")
        return None

def notify_user(message):
    clean_message = re.sub(r'\033\[.*?m', '', message)
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}{Colors.ENDC}")
    # ... (–∫–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def cost_report(cost_log, total_cost):
    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–û–ò–ú–û–°–¢–ò ---{Colors.ENDC}")
    for entry in cost_log:
        phase, cost = entry['phase'], entry['cost']
        if phase == 'PLANNING':
            print(f"  –§–∞–∑–∞: {phase:<12} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}")
        else:
            iteration = entry['iteration']
            print(f"  –§–∞–∑–∞: {phase:<12} | –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration:<2} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}")
    print(f"{Colors.BOLD}\n  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: ${total_cost:.6f}{Colors.ENDC}")

# --- –ì–õ–ê–í–ù–´–ô –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ô –¶–ò–ö–õ ---
def main(is_fix_mode, is_fast_mode, history_file_path, run_log_file_path):
    sloth_core.initialize_model()
    model_instance, active_service = sloth_core.get_active_service_details()
    if not model_instance: return f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å. –í—ã—Ö–æ–¥.{Colors.ENDC}"

    total_cost, cost_log = 0.0, []
    user_goal, error_log = get_user_input()
    if not user_goal: return f"{Colors.WARNING}–¶–µ–ª—å –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}"
    initial_task = user_goal + (f"\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò ---\n{error_log}" if error_log else "")
    
    attempt_history, final_message = [], ""
    state = "EXECUTION" if is_fast_mode else "PLANNING"
    iteration_count, files_to_include_fully, current_prompt = 1, None, None

    while iteration_count <= MAX_ITERATIONS:
        model_instance, active_service = sloth_core.get_active_service_details()

        # --- –≠–¢–ê–ü 1: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –£–¢–û–ß–ù–ï–ù–ò–ï (–µ—Å–ª–∏ –Ω–µ –≤ --fast —Ä–µ–∂–∏–º–µ) ---
        if state == "PLANNING":
            print(f"\n{Colors.BOLD}{Colors.HEADER}--- –≠–¢–ê–ü: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ---{Colors.ENDC}")
            project_context = get_project_context(is_fast_mode=False, files_to_include_fully=None)
            if not project_context: return f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.{Colors.ENDC}"
            
            prompt_for_planning = sloth_core.get_clarification_and_planning_prompt(project_context, initial_task)
            _log_run(run_log_file_path, f"–ó–ê–ü–†–û–° (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state})", prompt_for_planning)
            answer_data = sloth_core.send_request_to_model(model_instance, active_service, prompt_for_planning)
            
            if not answer_data:
                if sloth_core.model: print(f"{Colors.WARNING}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...{Colors.ENDC}"); time.sleep(5); continue
                else: final_message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ API."; break

            answer_text = answer_data["text"]
            _log_run(run_log_file_path, f"–û–¢–í–ï–¢ (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state})", answer_text)

            cost = calculate_cost(sloth_core.MODEL_NAME, answer_data["input_tokens"], answer_data["output_tokens"]); total_cost += cost
            cost_log.append({"phase": state, "iteration": 0, "cost": cost})
            print(f"{Colors.GREY}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Ö–æ–¥: {answer_data['input_tokens']} —Ç., –í—ã—Ö–æ–¥: {answer_data['output_tokens']} —Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${cost:.6f}{Colors.ENDC}")

            clarification = extract_block("clarification", answer_text)
            if clarification:
                print(f"{Colors.HEADER}{Colors.BOLD}ü§ñ –ú–æ–¥–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π:{Colors.ENDC}\n{Colors.CYAN}{clarification}{Colors.ENDC}")
                user_response = _read_multiline_input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–æ–¥–µ–ª–∏. (Enter 3 —Ä–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
                initial_task += f"\n\n--- –£–¢–û–ß–ù–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---\n{user_response}"
                continue

            plan = extract_block("plan", answer_text); files_list_str = extract_block("files", answer_text)
            if plan and files_list_str:
                print(f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–Ω—è—Ç–Ω–∞. –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω.{Colors.ENDC}\n{Colors.HEADER}–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:{Colors.ENDC}\n{Colors.CYAN}{plan}{Colors.ENDC}")
                with open("sloth_plan.txt", "w", encoding='utf-8') as f: f.write(plan)
                print(f"{Colors.OKGREEN}–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'sloth_plan.txt'.{Colors.ENDC}")
                
                files_to_include_fully = [line.strip() for line in files_list_str.split('\n') if line.strip()]
                print(f"{Colors.HEADER}–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤:{Colors.ENDC}\n{Colors.CYAN}" + "\n".join(files_to_include_fully) + Colors.ENDC)
                state = "EXECUTION" # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current_prompt = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞ —ç—Ç–∞–ø–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                continue
            else:
                print(f"{Colors.WARNING}‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∏ –ø–ª–∞–Ω–∞. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...{Colors.ENDC}"); time.sleep(5); continue

        # --- –≠–¢–ê–ü 2: –ò–°–ü–û–õ–ù–ï–ù–ò–ï ---
        if state == "EXECUTION":
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if current_prompt is None:
                project_context = get_project_context(is_fast_mode, files_to_include_fully)
                if not project_context: return f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"
                current_prompt = sloth_core.get_initial_prompt(project_context, initial_task, load_fix_history(history_file_path) if is_fix_mode else None)
            
            print(f"\n{Colors.BOLD}{Colors.HEADER}üöÄ --- –≠–¢–ê–ü: –ò–°–ü–û–õ–ù–ï–ù–ò–ï | –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} ---{Colors.ENDC}")
            _log_run(run_log_file_path, f"–ó–ê–ü–†–û–° (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration_count})", current_prompt)
            answer_data = sloth_core.send_request_to_model(model_instance, active_service, current_prompt, iteration_count)
            
            if not answer_data:
                if sloth_core.model: print(f"{Colors.WARNING}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...{Colors.ENDC}"); time.sleep(5); continue
                else: final_message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ API."; break

            answer_text = answer_data["text"]
            _log_run(run_log_file_path, f"–û–¢–í–ï–¢ (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration_count})", answer_text)

            cost = calculate_cost(sloth_core.MODEL_NAME, answer_data["input_tokens"], answer_data["output_tokens"]); total_cost += cost
            cost_log.append({"phase": state, "iteration": iteration_count, "cost": cost})
            print(f"{Colors.GREY}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Ö–æ–¥: {answer_data['input_tokens']} —Ç., –í—ã—Ö–æ–¥: {answer_data['output_tokens']} —Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${cost:.6f}{Colors.ENDC}")

            if extract_block("done_summary", answer_text) or answer_text.strip().upper().startswith("–ì–û–¢–û–í–û"):
                done_summary = extract_block("done_summary", answer_text) or "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."; final_message = f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–∑–∞ {iteration_count} –∏—Ç–µ—Ä–∞—Ü–∏–π){Colors.ENDC}"
                update_history_with_attempt(history_file_path, user_goal, done_summary)
                print(f"{Colors.OKGREEN}üìÑ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï:\n{Colors.CYAN}{done_summary}{Colors.ENDC}")
                manual_steps = extract_block("manual", answer_text)
                if manual_steps: final_message += f"\n\n{Colors.WARNING}‚úã –¢–†–ï–ë–£–Æ–¢–°–Ø –†–£–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:{Colors.ENDC}\n{manual_steps}"
                break

            commands_to_run = extract_block("bash", answer_text)
            if not commands_to_run:
                print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥. –ü—Ä–æ–±—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.{Colors.ENDC}")
                project_context = get_project_context(is_fast_mode, files_to_include_fully)
                current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history)
                iteration_count += 1; continue

            strategy_description = extract_block("summary", answer_text) or "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –æ–ø–∏—Å–∞–Ω–∞"
            print(f"\n{Colors.OKBLUE}üîß –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ shell-–∫–æ–º–∞–Ω–¥. –í—ã–ø–æ–ª–Ω—è—é...{Colors.ENDC}")
            success, failed_command, error_message = sloth_runner.execute_commands(commands_to_run)
            
            project_context = get_project_context(is_fast_mode, files_to_include_fully)
            if not project_context: final_message = f"{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."; break

            history_entry = f"**–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}:**\n**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
            if success:
                history_entry += "**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–°–ü–ï–•"
                current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history)
            else:
                history_entry += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ\n**–û—à–∏–±–∫–∞:** {error_message}"
                current_prompt = sloth_core.get_error_fixing_prompt(failed_command, error_message, user_goal, project_context, iteration_count + 1, attempt_history)
            
            attempt_history.append(history_entry)
            iteration_count += 1
    
    if not final_message: final_message = f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Colors.ENDC}"
    cost_report(cost_log, total_cost)
    return final_message

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    # –ö–æ–¥ –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    SLOTH_SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
    parser = argparse.ArgumentParser(description="Sloth: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞.")
    parser.add_argument('--here', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    parser.add_argument('--fix', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏.')
    parser.add_argument('--fast', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    args = parser.parse_args()

    history_file_path = os.path.join(SLOTH_SCRIPT_DIR, HISTORY_FILE_NAME)
    target_project_path, is_fast_mode = "", args.fast

    if args.fix:
        print(f"{Colors.CYAN}‚öôÔ∏è  –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º --fix. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {history_file_path}...{Colors.ENDC}")
        if not os.path.exists(history_file_path): print(f"{Colors.FAIL}‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}"); sys.exit(1)
        try:
            with open(history_file_path, 'r', encoding='utf-8') as f: config = json.load(f).get("last_run_config")
            target_project_path, is_fast_mode = config["target_project_path"], config["is_fast_mode"]
            print(f"{Colors.OKGREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–µ–∫—Ç: {target_project_path}, –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}.{Colors.ENDC}")
        except Exception as e: print(f"{Colors.FAIL}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}{Colors.ENDC}"); sys.exit(1)
    else:
        if args.here: target_project_path = os.getcwd()
        else:
            print(f"{Colors.OKBLUE}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ...{Colors.ENDC}")
            root = Tk(); root.withdraw(); target_project_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Sloth"); root.destroy()
        if not target_project_path: print(f"{Colors.FAIL}–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞.{Colors.ENDC}"); sys.exit(1)
        if os.path.exists(history_file_path): os.remove(history_file_path)
        initial_history = {"last_run_config": {"target_project_path": target_project_path, "is_fast_mode": is_fast_mode}, "previous_attempts": []}
        with open(history_file_path, 'w', encoding='utf-8') as f: json.dump(initial_history, f, indent=2, ensure_ascii=False)
        print(f"{Colors.CYAN}üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}")

    os.chdir(target_project_path)
    run_log_file_path = os.path.join(SLOTH_SCRIPT_DIR, RUN_LOG_FILE_NAME)
    try:
        with open(run_log_file_path, 'w', encoding='utf-8') as f: f.write(f"# SLOTH RUN LOG\n# –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç: {target_project_path}\n# –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}\n")
    except Exception as e: print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {run_log_file_path}: {e}{Colors.ENDC}")
    
    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try:
        final_status = main(is_fix_mode=args.fix, is_fast_mode=is_fast_mode, history_file_path=history_file_path, run_log_file_path=run_log_file_path)
    except KeyboardInterrupt: final_status = f"\n{Colors.OKBLUE}üîµ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        import traceback; traceback.print_exc()
        final_status = f"\n{Colors.FAIL}‚ùå –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}"); notify_user(final_status); print(f"\n{Colors.BOLD}üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}")