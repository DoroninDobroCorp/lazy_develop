# –§–∞–π–ª: sloth_cli.py
import os
import sys
import time
import re
import json
import platform
import subprocess
import argparse
# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö –ò–ú–ü–û–†–¢–ê TKINTER ---
try:
    from tkinter import Tk, filedialog
    TKINTER_AVAILABLE = True
except ImportError:
    TKINTER_AVAILABLE = False
import uuid
import shutil

from colors import Colors, Symbols
import sloth_core
import sloth_runner
import context_collector
import config as sloth_config

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---
MAX_ITERATIONS = 20
HISTORY_FILE_NAME = 'sloth_history.json'
RUN_LOG_FILE_NAME = 'sloth_run.log'
PLAN_FILE_NAME = 'sloth_plan.txt'
# –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤)
# –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: paths.default_start_dir
DEFAULT_START_DIR = '/Users/vladimirdoronin/VovkaNowEngineer'

def _parse_and_validate_filepath(header_line: str, project_root_dir: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ write_file.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç ValueError.
    """
    if not header_line.startswith("```write_file"):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ write_file: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å ```write_file. –ü–æ–ª—É—á–µ–Ω–æ: '{header_line}'")

    match = re.search(r'path\s*=\s*"([^"]+)"', header_line)
    if not match:
        raise ValueError(f"–ü—É—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É path=\"...\": '{header_line}'")
    
    path_from_model = match.group(1).strip()

    if not path_from_model:
        raise ValueError("–ê—Ç—Ä–∏–±—É—Ç 'path' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ write_file –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    if ".." in path_from_model.split(os.sep) or path_from_model.startswith(('~', '/', '\\')):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å (–ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å): '{path_from_model}'")

    normalized_path = os.path.normpath(path_from_model)
    project_root_abs = os.path.abspath(project_root_dir)
    intended_file_abs = os.path.abspath(os.path.join(project_root_abs, normalized_path))
    
    if not intended_file_abs.startswith(project_root_abs):
        raise ValueError(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: '{path_from_model}'")

    return intended_file_abs

def get_project_context(is_fast_mode, files_to_include_fully=None):
    print(f"{Colors.CYAN}{Symbols.SPINNER} –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}", end='\r', flush=True)
    start_time = time.time()
    try:
        if is_fast_mode:
            context_data = context_collector.gather_project_context(os.getcwd(), mode='full')
        else:
            mode = 'summarized'
            if files_to_include_fully:
                print(f"{Colors.GREY}{Symbols.INFO}  –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤: {len(files_to_include_fully)} —à—Ç.{Colors.ENDC}", flush=True)
            context_data = context_collector.gather_project_context(
                os.getcwd(), mode=mode, full_content_files=files_to_include_fully
            )
        duration = time.time() - start_time
        print(f"{Colors.OKGREEN}{Symbols.CHECK} –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{' '*10}{Colors.ENDC}", flush=True)
        return context_data, duration
    except Exception as e:
        print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{' '*20}{Colors.ENDC}", flush=True)
        return None, 0

def _log_run(log_file_path, title, content):
    try:
        with open(log_file_path, 'a', encoding='utf-8') as f:
            f.write("\n" + "="*80 + "\n" + f"{title}\n" + "-"*80 + "\n")
            f.write(str(content if content is not None else "<empty>") + "\n")
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ {log_file_path}: {e}{Colors.ENDC}", flush=True)

def _read_multiline_input(prompt):
    print(prompt, flush=True)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line:
                lines.append(line)
                empty_line_count = 0
            else:
                empty_line_count += 1
        except EOFError:
            break
    return '\n'.join(lines).strip()

def get_user_input():
    goal_prompt = (f"{Colors.HEADER}{Colors.BOLD} –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å.{Colors.ENDC}\n"
                   f"{Colors.CYAN}{Symbols.INFO} (–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}")
    user_goal = _read_multiline_input(goal_prompt)
    if not user_goal:
        return None, None
    log_prompt = (f"\n{Colors.HEADER}{Colors.BOLD} –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}")
    error_log = _read_multiline_input(log_prompt)
    return user_goal, error_log

def parse_all_blocks(text: str) -> list[dict]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ ```tag...``` –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è 'write_file' —Å boundary, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å
    —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ ``` –±–ª–æ–∫–∏.
    """
    # –≠—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—Ö–æ–¥–∏—Ç ```, —Ç–µ–≥, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º (–∂–∞–¥–Ω–æ) –í–ï–°–¨ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ ```
    pattern = re.compile(r"```(\w+)([^\n]*)?\n(.*?)\n```", re.DOTALL)
    
    blocks = []
    for match in pattern.finditer(text):
        block_type = match.group(1).strip()
        header_args = (match.group(2) or "").strip()
        full_header = f"```{block_type} {header_args}".strip()
        content = match.group(3)  # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç "–∫–∞–∫ –µ—Å—Ç—å"

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ boundary
        if block_type == 'write_file':
            boundary_match = re.search(r'boundary\s*=\s*"([^"]+)"', header_args)
            if boundary_match:
                boundary = boundary_match.group(1)
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ boundary, –æ—Ç—Ä–µ–∑–∞–µ–º –µ–≥–æ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º split, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
                if content.endswith(boundary):
                    content = content.rsplit(boundary, 1)[0].rstrip('\r\n')

        blocks.append({
            "type": block_type,
            "header": full_header,
            "content": content
        })
    return blocks

def update_history_with_attempt(history_file_path, goal, summary):
    try:
        with open(history_file_path, 'r+', encoding='utf-8') as f:
            history_data = json.load(f)
            new_entry = {"initial_goal": goal, "solution_summary": summary}
            history_data.setdefault("previous_attempts", []).insert(0, new_entry)
            f.seek(0)
            json.dump(history_data, f, indent=2, ensure_ascii=False)
            f.truncate()
        print(f"{Colors.OKGREEN}üíæ –õ–û–ì: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}", flush=True)
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è: {e}{Colors.ENDC}", flush=True)

def load_fix_history(history_file_path):
    if not os.path.exists(history_file_path):
        return None
    try:
        with open(history_file_path, 'r', encoding='utf-8') as f:
            history_data = json.load(f)
        attempts = history_data.get("previous_attempts", [])
        if not attempts:
            return None
        last_attempt = attempts[0]
        return (f"–≠—Ç–æ —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π:\n"
                f"  - –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {last_attempt.get('initial_goal', 'N/A')}\n"
                f"  - –¢–≤–æ–µ '—Ä–µ—à–µ–Ω–∏–µ': {last_attempt.get('solution_summary', 'N/A')}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path}: {e}{Colors.ENDC}", flush=True)
        return None

def notify_user(message):
    clean_message = re.sub(r'\033\[.*?m', '', message)
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...{Colors.ENDC}", flush=True)
    print(message, flush=True)

def time_report(timings, total_start_time):
    total_duration = time.time() - total_start_time
    measured_duration = sum(timings.values())
    other_duration = total_duration - measured_duration if total_duration > measured_duration else 0.0

    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–†–ï–ú–ï–ù–ò ---{Colors.ENDC}", flush=True)
    print(f"  - –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:   {timings['context']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –ó–∞–ø—Ä–æ—Å—ã –∫ –º–æ–¥–µ–ª–∏:   {timings['model']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:  {timings['commands']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:        {timings['verify']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –ü—Ä–æ—á–µ–µ (–≤–≤–æ–¥/etc):  {other_duration:.2f} —Å–µ–∫.", flush=True)
    print(f"{Colors.BOLD}\n  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_duration:.2f} —Å–µ–∫.{Colors.ENDC}", flush=True)

def cost_report(cost_log, total_cost):
    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–û–ò–ú–û–°–¢–ò ---{Colors.ENDC}", flush=True)
    for entry in cost_log:
        phase, cost = entry['phase'], entry['cost']
        if phase == 'PLANNING':
            print(f"  –§–∞–∑–∞: {phase:<12} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}", flush=True)
        else:
            iteration = entry['iteration']
            print(f"  –§–∞–∑–∞: {phase:<12} | –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration:<2} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}", flush=True)
    print(f"{Colors.BOLD}\n  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: ${total_cost:.6f}{Colors.ENDC}", flush=True)

def calculate_cost(model_name, input_tokens, output_tokens):
    """
    –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞.

    - –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OVERRIDE —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤:
        SLOTH_COST_IN_RATE, SLOTH_COST_OUT_RATE.
      –≠—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    - –ï—Å–ª–∏ ENV –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∞—Ä–∏—Ñ—ã –∏–∑ sloth_core.MODEL_PRICING,
      –≥–¥–µ —Ü–µ–Ω—ã –∑–∞–¥–∞–Ω—ã –∑–∞ 1,000,000 —Ç–æ–∫–µ–Ω–æ–≤ (–∫–∞–∫ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–∞–π—Å–∏–Ω–≥–µ Google Gemini).
    """
    # 1) –ü—Ä–æ–±—É–µ–º ENV-override; –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –æ–±–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
    try:
        in_rate = float(os.getenv("SLOTH_COST_IN_RATE", "0"))
        out_rate = float(os.getenv("SLOTH_COST_OUT_RATE", "0"))
    except Exception:
        in_rate, out_rate = 0.0, 0.0

    try:
        in_tokens = float(input_tokens or 0)
        out_tokens = float(output_tokens or 0)
    except Exception:
        in_tokens, out_tokens = 0.0, 0.0

    if in_rate > 0 or out_rate > 0:
        # ENV-override —Ç—Ä–∞–∫—Ç—É–µ–º –ö–ê–ö —Å—Ç–∞–≤–∫—É –∑–∞ 1,000 —Ç–æ–∫–µ–Ω–æ–≤ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏)
        return (in_tokens / 1000.0) * in_rate + (out_tokens / 1000.0) * out_rate

    # 2) –ï—Å–ª–∏ ENV –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ sloth_core.MODEL_PRICING (–ø–æ tiers)
    pricing = getattr(sloth_core, "MODEL_PRICING", {}) or {}

    def pick_model_key(name: str) -> str:
        if name in pricing:
            return name
        # –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É/–≤—Ö–æ–∂–¥–µ–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, gemini-2.5-pro-exp)
        name_low = (name or "").lower()
        for k in pricing.keys():
            k_low = k.lower()
            if name_low.startswith(k_low) or k_low in name_low:
                return k
        # –§–æ–ª–±—ç–∫ ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç –≤ sloth_core
        default_key = getattr(sloth_core, "MODEL_NAME", None)
        if default_key and default_key in pricing:
            return default_key
        return ""

    def pick_tier_price(tiers, tokens: float) -> float:
        try:
            # tiers: list of {up_to, price}; –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å up_to >= tokens
            sorted_tiers = sorted((tiers or []), key=lambda t: float(t.get("up_to", float('inf'))))
            for t in sorted_tiers:
                up_to = t.get("up_to", float('inf'))
                price = t.get("price", None)
                if price is None:
                    continue
                if tokens <= float(up_to):
                    return float(price)
            # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ 0
            if sorted_tiers:
                last_price = sorted_tiers[-1].get("price", 0.0)
                return float(last_price or 0.0)
        except Exception:
            pass
        return 0.0

    mkey = pick_model_key(model_name)
    mp = pricing.get(mkey, {})
    in_price_per_1k = pick_tier_price(((mp.get("input") or {}).get("tiers") or []), in_tokens)
    out_price_per_1k = pick_tier_price(((mp.get("output") or {}).get("tiers") or []), out_tokens)

    # –¶–µ–Ω—ã –∏–∑ MODEL_PRICING —Å—á–∏—Ç–∞–µ–º –∑–∞ 1,000,000 —Ç–æ–∫–µ–Ω–æ–≤ (–µ–¥–∏–Ω–∏—Ü–∞ –ø—Ä–∞–π—Å–∏–Ω–≥–∞ –æ—Ç Google)
    return (in_tokens / 1_000_000.0) * in_price_per_1k + (out_tokens / 1_000_000.0) * out_price_per_1k

def main(is_fix_mode, is_fast_mode, history_file_path, run_log_file_path, plan_file_path, verify_timeout_seconds=15, log_trim_limit=20000):
    total_start_time = time.time()
    timings = {'context': 0.0, 'model': 0.0, 'commands': 0.0, 'verify': 0.0}
    total_cost, cost_log = 0.0, []

    user_goal, error_log = get_user_input()
    if not user_goal:
        return f"{Colors.WARNING}–¶–µ–ª—å –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}"
    initial_task = user_goal + (f"\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò ---\n{error_log}" if error_log else "")
    
    # --- State Machine Setup ---
    state = "INITIAL_CODING" if is_fast_mode else "PLANNING"
    if is_fix_mode:
        state = "INITIAL_CODING"

    iteration_count = 1
    attempt_history, final_message = [], ""
    BOUNDARY_TOKEN = f"SLOTH_BOUNDARY_{uuid.uuid4().hex}"

    # Variables to pass data between states
    files_to_include_fully = None
    failed_command, error_message, logs_collected = None, None, None

    # --- Verify Command Setup ---
    verify_command = None
    try:
        # Simplified setup logic, assumes last_run_config exists if history does
        if os.path.exists(history_file_path):
            with open(history_file_path, 'r', encoding='utf-8') as f:
                verify_command = json.load(f).get("last_run_config", {}).get("verify_command")
        
        if not is_fast_mode and verify_command is None:
            print(f"{Colors.OKBLUE}–í–æ–ø—Ä–æ—Å: –ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'npm run dev' –∏–ª–∏ 'pytest')? –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter.{Colors.ENDC}", flush=True)
            verify_command = input().strip() or "" # Default to empty string
            # Save for the session
            if os.path.exists(history_file_path):
                with open(history_file_path, 'r+', encoding='utf-8') as f:
                    _hist = json.load(f)
                    _hist.setdefault("last_run_config", {})["verify_command"] = verify_command
                    f.seek(0)
                    json.dump(_hist, f, indent=2, ensure_ascii=False)
                    f.truncate()
            print(f"{Colors.CYAN}{Symbols.SAVE} –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏.{Colors.ENDC}", flush=True)
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å verify_command: {e}{Colors.ENDC}", flush=True)

    # –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–æ–∫ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤
    prev_changed_files = None
    repeat_same_files_count = 0

    while iteration_count <= MAX_ITERATIONS and state != "DONE":
        model_instance, active_service = sloth_core.get_active_service_details()

        # --- 1. GENERATE PROMPT BASED ON STATE ---
        current_prompt = None
        log_iter = iteration_count if state != "PLANNING" else 0
        
        if state == "PLANNING":
            print(f"\n{Colors.BOLD}{Colors.HEADER}--- –≠–¢–ê–ü: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ---{Colors.ENDC}", flush=True)
            project_context, duration = get_project_context(is_fast_mode=False, files_to_include_fully=None)
            timings['context'] += duration
            if project_context:
                current_prompt = sloth_core.get_clarification_and_planning_prompt(project_context, initial_task, boundary=BOUNDARY_TOKEN)
        else: # Any execution state
            print(f"\n{Colors.BOLD}{Colors.HEADER}{Symbols.ROCKET} --- –≠–¢–ê–ü: –ò–°–ü–û–õ–ù–ï–ù–ò–ï ({state}) | –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} ---{Colors.ENDC}", flush=True)
            project_context, duration = get_project_context(is_fast_mode, files_to_include_fully)
            timings['context'] += duration
            if project_context:
                if state == "INITIAL_CODING":
                    fix_history = load_fix_history(history_file_path) if is_fix_mode else None
                    current_prompt = sloth_core.get_initial_prompt(project_context, initial_task, fix_history, BOUNDARY_TOKEN)
                elif state == "REVIEWING":
                    current_prompt = sloth_core.get_review_prompt(project_context, initial_task, iteration_count, attempt_history, BOUNDARY_TOKEN)
                elif state == "FIXING_ERROR":
                    current_prompt = sloth_core.get_error_fixing_prompt(failed_command, error_message, initial_task, project_context, iteration_count, attempt_history, BOUNDARY_TOKEN)
                elif state == "ANALYZING_LOGS":
                    current_prompt = sloth_core.get_log_analysis_prompt(project_context, initial_task, attempt_history, logs_collected, BOUNDARY_TOKEN)
            
        if not project_context:
            final_message = f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.{Colors.ENDC}"
            break
        
        _log_run(run_log_file_path, f"–ó–ê–ü–†–û–° (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {log_iter})", current_prompt)
        # –õ–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –≤ sloth_core.send_request_to_model(); –∑–¥–µ—Å—å –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        print(f"{Colors.CYAN}{Symbols.SPINNER} –î—É–º–∞—é...{Colors.ENDC}", end='\r', flush=True)
        start_model_time = time.time()
        
        # --- 2. SEND REQUEST TO MODEL ---
        answer_data = sloth_core.send_request_to_model(model_instance, active_service, current_prompt, log_iter)
        model_duration = time.time() - start_model_time
        timings['model'] += model_duration

        if not answer_data:
            print(f"{Colors.WARNING}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...{Colors.ENDC}", flush=True)
            time.sleep(5)
            continue
        
        answer_text = answer_data["text"]
        _log_run(run_log_file_path, f"–û–¢–í–ï–¢ (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {log_iter})", answer_text)

        cost = calculate_cost(sloth_core.MODEL_NAME, answer_data["input_tokens"], answer_data["output_tokens"])
        total_cost += cost
        cost_log.append({"phase": state, "iteration": log_iter, "cost": cost})
        print(f"{Colors.GREY}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Ö–æ–¥: {answer_data['input_tokens']} —Ç., –í—ã—Ö–æ–¥: {answer_data['output_tokens']} —Ç. | –í—Ä–µ–º—è: {model_duration:.2f} —Å–µ–∫. | –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${cost:.6f}{' '*10}{Colors.ENDC}", flush=True)

        # --- 3. PROCESS RESPONSE AND DETERMINE NEXT STATE ---
        # --- –ù–û–í–´–ô, –ù–ê–î–ï–ñ–ù–´–ô –ö–û–î ---
        if state == "PLANNING":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è.
            all_plan_blocks = parse_all_blocks(answer_text)
            clarification_block = next((b for b in all_plan_blocks if b['type'] == 'clarification'), None)
            
            if clarification_block:
                clarification = clarification_block['content']
                print(f"{Colors.HEADER}{Colors.BOLD}ü§ñ –ú–æ–¥–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π:{Colors.ENDC}\n{Colors.CYAN}{clarification}{Colors.ENDC}", flush=True)
                user_response = _read_multiline_input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–æ–¥–µ–ª–∏. (Enter 3 —Ä–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
                initial_task += f"\n\n--- –£–¢–û–ß–ù–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---\n{user_response}"
                state = "PLANNING" # Loop in planning state
                continue

            plan_block = next((b for b in all_plan_blocks if b['type'] == 'plan'), None)
            files_block = next((b for b in all_plan_blocks if b['type'] == 'files'), None)

            if plan_block and files_block:
                plan = plan_block['content']
                files_list_str = files_block['content']
                print(f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–Ω—è—Ç–Ω–∞. –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω.{Colors.ENDC}\n{Colors.HEADER}–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:{Colors.ENDC}\n{Colors.CYAN}{plan}{Colors.ENDC}", flush=True)
                with open(plan_file_path, "w", encoding='utf-8') as f: f.write(plan)
                
                raw_files_list = [line.strip() for line in files_list_str.split('\n') if line.strip() and not line.strip().startswith('- ')]
                # –ó–¥–µ—Å—å _normalize_model_path –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø–∏—Å–∏
                files_to_include_fully = raw_files_list

                print(f"{Colors.HEADER}–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤:{Colors.ENDC}\n{Colors.CYAN}" + "\n".join(files_to_include_fully) + Colors.ENDC, flush=True)
                state = "INITIAL_CODING"
            else:
                print(f"{Colors.WARNING}‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∏ –ø–ª–∞–Ω–∞. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...{Colors.ENDC}", flush=True)
                time.sleep(5)
                state = "PLANNING"
        else: # –õ—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            all_blocks = parse_all_blocks(answer_text)

            strategy_description = next((b['content'] for b in all_blocks if b['type'] == 'summary'), "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –æ–ø–∏—Å–∞–Ω–∞")
            commands_to_run_block = next((b for b in all_blocks if b['type'] == 'bash'), None)
            write_file_blocks = [b for b in all_blocks if b['type'] == 'write_file']
            verify_run_present = any(b['type'] == 'verify_run' for b in all_blocks)
            done_summary_block = next((b for b in all_blocks if b['type'] == 'done_summary'), None)
            is_done = done_summary_block is not None

            action_taken, success = False, False
            iteration_changed_files = set()
            iteration_created_paths = set()

            if write_file_blocks:
                action_taken = True
                for block in write_file_blocks:
                    try:
                        safe_filepath = _parse_and_validate_filepath(block['header'], os.getcwd())
                        relative_path_for_display = os.path.relpath(safe_filepath, os.getcwd())
                        
                        # --- –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê ---
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ä–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        if not block['content'] and os.path.exists(safe_filepath):
                            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {relative_path_for_display}. –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.{Colors.ENDC}", flush=True)
                            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–ø–∏—Å—å
                        # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---
                        
                        print(f"\n{Colors.OKBLUE}üìù –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Ñ–∞–π–ª: {relative_path_for_display}{Colors.ENDC}", flush=True)
                        existed_before = os.path.exists(safe_filepath)
                        os.makedirs(os.path.dirname(safe_filepath), exist_ok=True)
                        with open(safe_filepath, "w", encoding="utf-8", newline="") as f:
                            f.write(block['content'])

                        print(f"{Colors.OKGREEN}‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: {relative_path_for_display}{Colors.ENDC}", flush=True)
                        success = True
                        iteration_changed_files.add(relative_path_for_display)
                        if not existed_before:
                            iteration_created_paths.add(relative_path_for_display)
                    except ValueError as e:
                        print(f"{Colors.FAIL}‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: {e}{Colors.ENDC}", flush=True)
                        success, failed_command, error_message = False, f"write_file ({block['header']})", str(e)
                        break
                    except Exception as e:
                        print(f"{Colors.FAIL}‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ '{block['header']}': {e}{Colors.ENDC}", flush=True)
                        success, failed_command, error_message = False, f"write_file ({block['header']})", str(e)
                        break
            
            elif commands_to_run_block:
                action_taken = True
                print(f"\n{Colors.OKBLUE}üîß –í—ã–ø–æ–ª–Ω—è—é shell-–∫–æ–º–∞–Ω–¥—ã...{Colors.ENDC}", flush=True)
                start_cmd_time = time.time()
                success, failed_command, error_message, changed_files, created_paths = sloth_runner.execute_commands(commands_to_run_block['content'])
                iteration_changed_files |= set(changed_files or set())
                iteration_created_paths |= set(created_paths or set())
                timings['commands'] += time.time() - start_cmd_time

            # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å—Ç–∞—ë—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
            history_entry = f"**–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count} ({state}):**\n**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
            if iteration_changed_files or iteration_created_paths:
                changed_list = ", ".join(sorted(iteration_changed_files)) or "‚Äî"
                created_list = ", ".join(sorted(iteration_created_paths)) or "‚Äî"
                history_entry += f"**–ò–∑–º–µ–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:** {changed_list}\n**–°–æ–∑–¥–∞–Ω—ã –ø—É—Ç–∏:** {created_list}\n"

            # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–æ–∫ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤
            if prev_changed_files is not None and iteration_changed_files == prev_changed_files and iteration_changed_files:
                repeat_same_files_count += 1
            else:
                repeat_same_files_count = 0
            prev_changed_files = set(iteration_changed_files)
            if repeat_same_files_count >= 1 and iteration_changed_files:
                history_entry += f"**–ó–∞–º–µ—á–∞–Ω–∏–µ:** –ü–æ–≤—Ç–æ—Ä –ø—Ä–∞–≤–æ–∫ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤ —É–∂–µ {repeat_same_files_count + 1} –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥. –ò–∑–±–µ–≥–∞–π –º–∏–∫—Ä–æ‚Äë–∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–π –ø—Ä–∞–≤–∫–∏ –∏, –µ—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π `–ì–û–¢–û–í–û`.\n"

            # –ï—Å–ª–∏ —Ç–µ –∂–µ —Ñ–∞–π–ª—ã –º–µ–Ω—è—é—Ç—Å—è —É–∂–µ –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ ‚Äî —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
            if repeat_same_files_count >= 2 and iteration_changed_files:
                print(f"{Colors.WARNING}{Symbols.WARNING}  –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä –ø—Ä–∞–≤–æ–∫ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤ (>=3 –ø–æ–¥—Ä—è–¥). –§–æ—Ä—Å–∏—Ä—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤.{Colors.ENDC}", flush=True)
                if verify_command is not None:
                    print(f"{Colors.OKBLUE}üß™ (FORCED) –ó–∞–ø—É—Å–∫–∞—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {verify_command}{Colors.ENDC}", flush=True)
                    start_verify_time = time.time()
                    try:
                        proc = subprocess.Popen(verify_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, encoding='utf-8')
                        stdout, stderr = proc.communicate(timeout=verify_timeout_seconds)
                        rc = proc.returncode
                    except subprocess.TimeoutExpired:
                        proc.kill(); stdout, stderr = proc.communicate(); rc = 124
                    except Exception as e:
                        stdout, stderr, rc = "", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ verify_command: {e}", -1
                    timings['verify'] += time.time() - start_verify_time
                    def _trim(s, lim=log_trim_limit): return (s[:lim] + "\n...[TRIMMED]...") if len(s) > lim else s
                    logs_collected = f"$ {verify_command}\n(exit={rc})\n\n[STDOUT]\n{_trim(stdout)}\n\n[STDERR]\n{_trim(stderr)}"
                    _log_run(run_log_file_path, "–õ–û–ì–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò (FORCED)", logs_collected)
                else:
                    logs_collected = "(–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–æ–∫ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤."
                    _log_run(run_log_file_path, "–õ–û–ì–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò (FORCED-NONE)", logs_collected)
                state = "ANALYZING_LOGS"
                attempt_history.append(history_entry)
                iteration_count += 1
                continue

            if is_done:
                final_message = f"{Colors.OKGREEN}{Symbols.CHECK} –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–∑–∞ {iteration_count} –∏—Ç–µ—Ä–∞—Ü–∏–π){Colors.ENDC}"
                done_summary_text = done_summary_block['content'] if done_summary_block else "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
                update_history_with_attempt(history_file_path, user_goal, done_summary_text)
                print(f"{Colors.OKGREEN}üìÑ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï:\n{Colors.CYAN}{done_summary_text or '–ù–µ—Ç —Ä–µ–∑—é–º–µ.'}{Colors.ENDC}", flush=True)
                manual_block = next((b for b in all_blocks if b['type'] == 'manual'), None)
                if manual_block:
                    final_message += f"\n\n{Colors.WARNING}‚úã –¢–†–ï–ë–£–Æ–¢–°–Ø –†–£–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:{Colors.ENDC}\n{manual_block['content']}"
                state = "DONE"
            elif not action_taken:
                print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ –∫–æ–º–∞–Ω–¥, –Ω–∏ —Ñ–∞–π–ª–∞. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –∞–Ω–∞–ª–∏–∑—É.{Colors.ENDC}", flush=True)
                history_entry += "**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ (–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π)\n**–û—à–∏–±–∫–∞:** –ú–æ–¥–µ–ª—å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π."
                state = "REVIEWING"
            elif success:
                history_entry += "**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–°–ü–ï–•"
                if verify_run_present and verify_command is not None:
                    print(f"{Colors.OKBLUE}üß™ –ó–∞–ø—É—Å–∫–∞—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {verify_command}{Colors.ENDC}", flush=True)
                    start_verify_time = time.time()
                    try:
                        proc = subprocess.Popen(verify_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, encoding='utf-8')
                        stdout, stderr = proc.communicate(timeout=verify_timeout_seconds)
                        rc = proc.returncode
                    except subprocess.TimeoutExpired:
                        proc.kill(); stdout, stderr = proc.communicate(); rc = 124
                    except Exception as e:
                        stdout, stderr, rc = "", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ verify_command: {e}", -1
                    timings['verify'] += time.time() - start_verify_time
                    def _trim(s, lim=log_trim_limit): return (s[:lim] + "\n...[TRIMMED]...") if len(s) > lim else s
                    logs_collected = f"$ {verify_command}\n(exit={rc})\n\n[STDOUT]\n{_trim(stdout)}\n\n[STDERR]\n{_trim(stderr)}"
                    _log_run(run_log_file_path, "–õ–û–ì–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò", logs_collected)
                    state = "ANALYZING_LOGS"
                else:
                    if verify_run_present: print(f"{Colors.GREY}{Symbols.INFO} verify_run –µ—Å—Ç—å, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.{Colors.ENDC}", flush=True)
                    state = "REVIEWING"
            else: # failure
                history_entry += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ\n**–û—à–∏–±–∫–∞:** {error_message}"
                state = "FIXING_ERROR"

            attempt_history.append(history_entry)
            iteration_count += 1

    if state != "DONE":
        final_message = f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π.{Colors.ENDC}"
    
    time_report(timings, total_start_time)
    cost_report(cost_log, total_cost)
    return final_message

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    SLOTH_SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
    parser = argparse.ArgumentParser(description="Sloth: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞.")
    parser.add_argument('--here', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    parser.add_argument('--fix', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏.')
    parser.add_argument('--fast', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    parser.add_argument('--verify-timeout', type=int, default=None, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (env SLOTH_VERIFY_TIMEOUT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15).')
    parser.add_argument('--log-trim-limit', type=int, default=None, help='–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ stdout/stderr –≤ –ª–æ–≥–∞—Ö (env SLOTH_LOG_TRIM_LIMIT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20000).')
    args = parser.parse_args()

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –ª–æ–≥–æ–≤ ---
    LOGS_DIR = os.path.join(SLOTH_SCRIPT_DIR, 'logs')
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–æ–≥–∏
    if not args.fix:
        if os.path.exists(LOGS_DIR):
            shutil.rmtree(LOGS_DIR)
        os.makedirs(LOGS_DIR)
        # –î–æ–±–∞–≤–∏—Ç—å .gitignore, —á—Ç–æ–±—ã –ª–æ–≥–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ Git
        with open(os.path.join(LOGS_DIR, '.gitignore'), 'w', encoding='utf-8') as f:
            f.write('*\n')
    else:
        # –í —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(LOGS_DIR, exist_ok=True)

    # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ---
    sloth_core.initialize_model()
    model_instance, _ = sloth_core.get_active_service_details()
    if not model_instance:
        print(f"{Colors.FAIL}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å. "
              f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}", flush=True)
        sys.exit(1)
    print(f"{Colors.OKGREEN}‚úÖ –ú–æ–¥–µ–ª—å AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.{Colors.ENDC}\n", flush=True)

    # --- 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É ---
    history_file_path = os.path.join(LOGS_DIR, HISTORY_FILE_NAME)
    target_project_path, is_fast_mode = "", args.fast

    if args.fix:
        print(f"{Colors.CYAN}{Symbols.GEAR}  –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º --fix. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {history_file_path}...{Colors.ENDC}", flush=True)
        if not os.path.exists(history_file_path):
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –û–®–ò–ë–ö–ê: –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}", flush=True)
            sys.exit(1)
        try:
            with open(history_file_path, 'r', encoding='utf-8') as f:
                config = json.load(f).get("last_run_config")
            target_project_path, is_fast_mode = config["target_project_path"], config["is_fast_mode"]
            print(f"{Colors.OKGREEN}{Symbols.CHECK} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–µ–∫—Ç: {target_project_path}, –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}.{Colors.ENDC}", flush=True)
        except Exception as e:
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}{Colors.ENDC}", flush=True)
            sys.exit(1)
    else:
        if args.here:
            target_project_path = os.getcwd()
        else:
            _cfg_start = sloth_config.get("paths.default_start_dir", DEFAULT_START_DIR)
            _start_dir = _cfg_start if os.path.isdir(_cfg_start) else os.path.expanduser("~")
            if TKINTER_AVAILABLE:
                print(f"{Colors.OKBLUE}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ...{Colors.ENDC}", flush=True)
                root = Tk(); root.withdraw()
                target_project_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Sloth", initialdir=_start_dir)
                root.destroy()
            else:
                print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: GUI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤–≤–æ–¥.{Colors.ENDC}", flush=True)
                prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è '{_start_dir}'): "
                user_path = input(prompt).strip()
                target_project_path = user_path or _start_dir
        if not target_project_path or not os.path.isdir(target_project_path):
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{Colors.ENDC}", flush=True)
            sys.exit(1)
        if os.path.exists(history_file_path):
            os.remove(history_file_path)
        initial_history = {
            "last_run_config": {"target_project_path": target_project_path, "is_fast_mode": is_fast_mode},
            "previous_attempts": []
        }
        with open(history_file_path, 'w', encoding='utf-8') as f:
            json.dump(initial_history, f, indent=2, ensure_ascii=False)
        print(f"{Colors.CYAN}{Symbols.SAVE} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}", flush=True)

    # --- 3. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å–∫ ---
    print(f"{Colors.OKGREEN}{Symbols.CHECK} –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {target_project_path}{Colors.ENDC}", flush=True)
    os.chdir(target_project_path)
    run_log_file_path = os.path.join(LOGS_DIR, RUN_LOG_FILE_NAME)
    plan_file_path = os.path.join(LOGS_DIR, PLAN_FILE_NAME)
    try:
        with open(run_log_file_path, 'w', encoding='utf-8') as f:
            f.write(f"# SLOTH RUN LOG\n# –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç: {target_project_path}\n# –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}\n")
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {run_log_file_path}: {e}{Colors.ENDC}", flush=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –æ–±—Ä–µ–∑–∫–∏ –ª–æ–≥–æ–≤ (CLI ‚Üí ENV ‚Üí default)
    env_verify_timeout = int(os.getenv("SLOTH_VERIFY_TIMEOUT", "15"))
    env_log_trim_limit = int(os.getenv("SLOTH_LOG_TRIM_LIMIT", "20000"))
    verify_timeout_seconds = args.verify_timeout if args.verify_timeout is not None else env_verify_timeout
    log_trim_limit = args.log_trim_limit if args.log_trim_limit is not None else env_log_trim_limit

    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try:
        final_status = main(
            is_fix_mode=args.fix,
            is_fast_mode=is_fast_mode,
            history_file_path=history_file_path,
            run_log_file_path=run_log_file_path,
            plan_file_path=plan_file_path,
            verify_timeout_seconds=verify_timeout_seconds,
            log_trim_limit=log_trim_limit,
        )
    except KeyboardInterrupt:
        final_status = f"\n{Colors.OKBLUE}{Symbols.BLUE_DOT} –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        import traceback; traceback.print_exc()
        final_status = f"\n{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}", flush=True)
        print(f"\n{Colors.BOLD}{Symbols.FLAG} –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}", flush=True)