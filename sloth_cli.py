# –§–∞–π–ª: sloth_cli.py
import os
import sys
import time
import re
import json
import platform
import subprocess
import argparse
from tkinter import Tk, filedialog
import uuid

from colors import Colors, Symbols
import sloth_core
import sloth_runner
import context_collector
import config as sloth_config

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---
MAX_ITERATIONS = 20
HISTORY_FILE_NAME = 'sloth_history.json'
RUN_LOG_FILE_NAME = 'sloth_run.log'
# –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤)
# –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: paths.default_start_dir
DEFAULT_START_DIR = '/Users/vladimirdoronin/VovkaNowEngineer'

def calculate_cost(model_name, input_tokens, output_tokens):
    pricing_info = sloth_core.MODEL_PRICING.get(model_name)
    if not pricing_info:
        return 0.0
    total_cost = 0.0
    input_tiers = pricing_info.get("input", {}).get("tiers", [])
    for tier in input_tiers:
        if input_tokens <= tier["up_to"]:
            total_cost += (tier["price"] / 1_000_000) * input_tokens
            break
    output_tiers = pricing_info.get("output", {}).get("tiers", [])
    for tier in output_tiers:
        if output_tokens <= tier["up_to"]:
            total_cost += (tier["price"] / 1_000_000) * output_tokens
            break
    return total_cost

def get_project_context(is_fast_mode, files_to_include_fully=None):
    print(f"{Colors.CYAN}{Symbols.SPINNER} –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}", end='\r', flush=True)
    start_time = time.time()
    try:
        if is_fast_mode:
            context_data = context_collector.gather_project_context(os.getcwd(), mode='full')
        else:
            mode = 'summarized'
            if files_to_include_fully:
                print(f"{Colors.GREY}{Symbols.INFO}  –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤: {len(files_to_include_fully)} —à—Ç.{Colors.ENDC}", flush=True)
            context_data = context_collector.gather_project_context(
                os.getcwd(), mode=mode, full_content_files=files_to_include_fully
            )
        duration = time.time() - start_time
        print(f"{Colors.OKGREEN}{Symbols.CHECK} –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{' '*10}{Colors.ENDC}", flush=True)
        return context_data, duration
    except Exception as e:
        print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{' '*20}{Colors.ENDC}", flush=True)
        return None, 0

def _log_run(log_file_path, title, content):
    try:
        with open(log_file_path, 'a', encoding='utf-8') as f:
            f.write("\n" + "="*80 + "\n" + f"{title}\n" + "-"*80 + "\n")
            f.write(str(content if content is not None else "<empty>") + "\n")
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ {log_file_path}: {e}{Colors.ENDC}", flush=True)

def _read_multiline_input(prompt):
    print(prompt, flush=True)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line:
                lines.append(line)
                empty_line_count = 0
            else:
                empty_line_count += 1
        except EOFError:
            break
    return '\n'.join(lines).strip()

def get_user_input():
    goal_prompt = (f"{Colors.HEADER}{Colors.BOLD} –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å.{Colors.ENDC}\n"
                   f"{Colors.CYAN}{Symbols.INFO} (–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}")
    user_goal = _read_multiline_input(goal_prompt)
    if not user_goal:
        return None, None
    log_prompt = (f"\n{Colors.HEADER}{Colors.BOLD} –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}")
    error_log = _read_multiline_input(log_prompt)
    return user_goal, error_log

def extract_block(tag, text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –≤–∏–¥–∞ ```{tag}\n...\n``` –∏–ª–∏ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ ```{tag}```."""
    lines = text.splitlines()
    start_idx = None
    fence_prefix = f"```{tag}"
    for i, line in enumerate(lines):
        stripped_line = line.strip()
        if stripped_line.startswith(fence_prefix):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è "—Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ" —Ç–µ–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ```verify_run```.
            # –û–±—ã—á–Ω—ã–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ (```plan, ```files, ```write_file ...) –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª—å–Ω—ã–º.
            if stripped_line == f"{fence_prefix}```":
                return ""  # –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–µ—Ç
            start_idx = i + 1
            break
    if start_idx is None:
        return None
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –æ—Å—Ç–∞—ë—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
    for j in range(start_idx, len(lines)):
        if lines[j].strip() == "```":
            return "\n".join(lines[start_idx:j]).strip()
    return None  # –ë–ª–æ–∫ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç

_ALLOWED_TAGS_AFTER_FENCE = {"summary","bash","manual","files","plan","clarification","done_summary","write_file","verify_run"}

def _parse_write_file_header(header_line: str):
    header = header_line.strip()
    if header.startswith("```write_file"):
        header = header[len("```write_file"):].strip()
    path, boundary = "", None
    m = re.search(r'boundary\s*=\s*"([^"]+)"', header) or re.search(r'boundary\s*=\s*([^\s]+)', header)
    if m: boundary = m.group(1).strip().strip('"').strip("'")
    p = re.search(r'path\s*=\s*"([^"]+)"', header) or re.search(r'path\s*=\s*([^\s]+)', header)
    if p: path = p.group(1).strip().strip('"').strip("'")
    else:
        for tok in header.split():
            if "=" not in tok:
                path = tok.strip().strip('"').strip("'"); break
    return path, boundary

def _iter_write_file_blocks(answer_text: str, boundary_token: str):
    lines, i, n = answer_text.splitlines(), 0, len(answer_text.splitlines())
    while i < n:
        ln = lines[i].strip()
        if ln.startswith("```write_file"):
            filepath, boundary = _parse_write_file_header(ln)
            i += 1
            content = []
            if boundary:  # –≥–ª–∞–≤–Ω—ã–π –ø—É—Ç—å: —á–∏—Ç–∞–µ–º –¥–æ —Å—Ç—Ä–æ–∫–∏-–≥—Ä–∞–Ω–∏—Ü—ã
                while i < n and lines[i].strip() != boundary:
                    content.append(lines[i]); i += 1
                if i < n and lines[i].strip() == boundary: i += 1
                if i < n and lines[i].strip() == "```": i += 1
                yield filepath, "\n".join(content); continue
            # fallback: –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ ``` —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –±–ª–æ–∫
            while i < n:
                if lines[i].strip() == "```":
                    j = i + 1
                    while j < n and lines[j].strip() == "": j += 1
                    if j >= n: break
                    nxt = lines[j].strip()
                    if nxt.startswith("```"): break
                    if any(nxt.startswith(t) or nxt.startswith(f"```{t}") for t in _ALLOWED_TAGS_AFTER_FENCE):
                        break
                    content.append(lines[i]); i += 1; continue
                content.append(lines[i]); i += 1
            if i < n and lines[i].strip() == "```": i += 1
            yield filepath, "\n".join(content); continue
        i += 1

def _normalize_model_path(p: str) -> str:
    p = (p or "").strip().strip('"').strip("'").replace("\\","/")
    if p.startswith("./"): p = p[2:]
    cwd = os.getcwd(); root = os.path.basename(cwd.rstrip(os.sep))
    cwd_posix = cwd.replace("\\","/").rstrip("/")
    if p.startswith("/"):
        if p.startswith(cwd_posix + "/"): p = p[len(cwd_posix)+1:]
        else: p = p.lstrip("/")
    if p.startswith(root + "/"): p = p[len(root)+1:]
    p = os.path.normpath(p).replace("\\","/")
    if p.startswith("../"): p = p[3:]
    if p == ".": p = ""
    return p

def update_history_with_attempt(history_file_path, goal, summary):
    try:
        with open(history_file_path, 'r+', encoding='utf-8') as f:
            history_data = json.load(f)
            new_entry = {"initial_goal": goal, "solution_summary": summary}
            history_data.setdefault("previous_attempts", []).insert(0, new_entry)
            f.seek(0)
            json.dump(history_data, f, indent=2, ensure_ascii=False)
            f.truncate()
        print(f"{Colors.OKGREEN}üíæ –õ–û–ì: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}", flush=True)
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è: {e}{Colors.ENDC}", flush=True)

def load_fix_history(history_file_path):
    if not os.path.exists(history_file_path):
        return None
    try:
        with open(history_file_path, 'r', encoding='utf-8') as f:
            history_data = json.load(f)
        attempts = history_data.get("previous_attempts", [])
        if not attempts:
            return None
        last_attempt = attempts[0]
        return (f"–≠—Ç–æ —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π:\n"
                f"  - –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {last_attempt.get('initial_goal', 'N/A')}\n"
                f"  - –¢–≤–æ–µ '—Ä–µ—à–µ–Ω–∏–µ': {last_attempt.get('solution_summary', 'N/A')}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path}: {e}{Colors.ENDC}", flush=True)
        return None

def notify_user(message):
    clean_message = re.sub(r'\033\[.*?m', '', message)
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...{Colors.ENDC}", flush=True)
    print(message, flush=True)

def time_report(timings, total_start_time):
    total_duration = time.time() - total_start_time
    measured_duration = sum(timings.values())
    other_duration = total_duration - measured_duration if total_duration > measured_duration else 0.0

    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–†–ï–ú–ï–ù–ò ---{Colors.ENDC}", flush=True)
    print(f"  - –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:   {timings['context']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –ó–∞–ø—Ä–æ—Å—ã –∫ –º–æ–¥–µ–ª–∏:   {timings['model']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:  {timings['commands']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:        {timings['verify']:.2f} —Å–µ–∫.", flush=True)
    print(f"  - –ü—Ä–æ—á–µ–µ (–≤–≤–æ–¥/etc):  {other_duration:.2f} —Å–µ–∫.", flush=True)
    print(f"{Colors.BOLD}\n  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_duration:.2f} —Å–µ–∫.{Colors.ENDC}", flush=True)

def cost_report(cost_log, total_cost):
    print(f"\n{Colors.BOLD}{Colors.HEADER}--- –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–û–ò–ú–û–°–¢–ò ---{Colors.ENDC}", flush=True)
    for entry in cost_log:
        phase, cost = entry['phase'], entry['cost']
        if phase == 'PLANNING':
            print(f"  –§–∞–∑–∞: {phase:<12} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}", flush=True)
        else:
            iteration = entry['iteration']
            print(f"  –§–∞–∑–∞: {phase:<12} | –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration:<2} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}", flush=True)
    print(f"{Colors.BOLD}\n  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: ${total_cost:.6f}{Colors.ENDC}", flush=True)

def main(is_fix_mode, is_fast_mode, history_file_path, run_log_file_path, verify_timeout_seconds=15, log_trim_limit=20000):
    # –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞ –¥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    model_instance, active_service = sloth_core.get_active_service_details()
    if not model_instance:
        # –≠—Ç–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–µ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
        return f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –í—ã—Ö–æ–¥.{Colors.ENDC}"

    total_start_time = time.time()
    timings = {'context': 0.0, 'model': 0.0, 'commands': 0.0, 'verify': 0.0}
    total_cost, cost_log = 0.0, []

    user_goal, error_log = get_user_input()
    if not user_goal:
        return f"{Colors.WARNING}–¶–µ–ª—å –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}"
    initial_task = user_goal + (f"\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò ---\n{error_log}" if error_log else "")
    
    attempt_history, final_message = [], ""
    state = "EXECUTION" if is_fast_mode else "PLANNING"
    iteration_count, files_to_include_fully, current_prompt = 1, None, None
    current_prompt_type = None  # one of: planning, initial, review, error_fix, log_analysis

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω-–≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è write_file
    BOUNDARY_TOKEN = f"SLOTH_BOUNDARY_{uuid.uuid4().hex}"

    # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è verify_command (—Å–ø—Ä–æ—Å–∏—Ç—å –û–î–ò–ù —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é, —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ) ---
    verify_command = None
    try:
        if os.path.exists(history_file_path):
            with open(history_file_path, 'r', encoding='utf-8') as f:
                _hist = json.load(f)
        else:
            _hist = {}
        last_cfg = (_hist.get("last_run_config") or {})
        verify_command = last_cfg.get("verify_command")
        if not is_fast_mode and verify_command is None:
            print(f"{Colors.OKBLUE}–í–æ–ø—Ä–æ—Å: –ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'npm run dev' –∏–ª–∏ 'pytest')? –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter.{Colors.ENDC}", flush=True)
            try:
                verify_command = input().strip()
            except EOFError:
                verify_command = ""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç (–¥–∞–∂–µ –ø—É—Å—Ç–æ–π), —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å
            last_cfg["verify_command"] = verify_command
            _hist["last_run_config"] = last_cfg
            with open(history_file_path, 'w', encoding='utf-8') as f:
                json.dump(_hist, f, indent=2, ensure_ascii=False)
            print(f"{Colors.CYAN}{Symbols.SAVE} –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏.{Colors.ENDC}", flush=True)
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å verify_command: {e}{Colors.ENDC}", flush=True)

    while iteration_count <= MAX_ITERATIONS:
        model_instance, active_service = sloth_core.get_active_service_details()

        if state == "PLANNING":
            print(f"\n{Colors.BOLD}{Colors.HEADER}--- –≠–¢–ê–ü: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ---{Colors.ENDC}", flush=True)
            project_context, duration = get_project_context(is_fast_mode=False, files_to_include_fully=None)
            timings['context'] += duration
            if not project_context:
                return f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.{Colors.ENDC}"
            current_prompt = sloth_core.get_clarification_and_planning_prompt(project_context, initial_task, boundary=BOUNDARY_TOKEN)
            current_prompt_type = "planning"
        
        elif state == "EXECUTION" and current_prompt is None:
            project_context, duration = get_project_context(is_fast_mode, files_to_include_fully)
            timings['context'] += duration
            if not project_context:
                return f"{Colors.FAIL}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"
            current_prompt = sloth_core.get_initial_prompt(
                project_context, initial_task,
                sloth_core.get_active_service_details() and (load_fix_history(history_file_path) if is_fix_mode else None),
                boundary=BOUNDARY_TOKEN
            )
            current_prompt_type = "initial"
            
        log_iter = iteration_count if state == "EXECUTION" else 0
        if state == "EXECUTION":
            print(f"\n{Colors.BOLD}{Colors.HEADER}{Symbols.ROCKET} --- –≠–¢–ê–ü: –ò–°–ü–û–õ–ù–ï–ù–ò–ï | –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} ---{Colors.ENDC}", flush=True)
        
        _log_run(run_log_file_path, f"–ó–ê–ü–†–û–° (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {log_iter})", current_prompt)
        print(f"{Colors.CYAN}{Symbols.SPINNER} –î—É–º–∞—é...{Colors.ENDC}", end='\r', flush=True)
        start_model_time = time.time()
        answer_data = sloth_core.send_request_to_model(model_instance, active_service, current_prompt, log_iter)
        model_duration = time.time() - start_model_time
        timings['model'] += model_duration
        
        if not answer_data:
            if sloth_core.model:
                print(f"{Colors.WARNING}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...{Colors.ENDC}", flush=True)
                time.sleep(5)
                continue
            else:
                final_message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ API."
                break

        answer_text = answer_data["text"]
        _log_run(run_log_file_path, f"–û–¢–í–ï–¢ (–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –ò—Ç–µ—Ä–∞—Ü–∏—è: {log_iter})", answer_text)

        cost = calculate_cost(sloth_core.MODEL_NAME, answer_data["input_tokens"], answer_data["output_tokens"])
        total_cost += cost
        cost_log.append({"phase": state, "iteration": log_iter, "cost": cost})
        print(f"{Colors.GREY}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Ö–æ–¥: {answer_data['input_tokens']} —Ç., –í—ã—Ö–æ–¥: {answer_data['output_tokens']} —Ç. | –í—Ä–µ–º—è: {model_duration:.2f} —Å–µ–∫. | –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${cost:.6f}{' '*10}{Colors.ENDC}", flush=True)

        if state == "PLANNING":
            clarification = extract_block("clarification", answer_text)
            if clarification:
                print(f"{Colors.HEADER}{Colors.BOLD}ü§ñ –ú–æ–¥–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π:{Colors.ENDC}\n{Colors.CYAN}{clarification}{Colors.ENDC}", flush=True)
                user_response = _read_multiline_input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–æ–¥–µ–ª–∏. (Enter 3 —Ä–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
                initial_task += f"\n\n--- –£–¢–û–ß–ù–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---\n{user_response}"
                current_prompt = None
                continue

            plan = extract_block("plan", answer_text)
            files_list_str = extract_block("files", answer_text)
            if plan and files_list_str:
                print(f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–Ω—è—Ç–Ω–∞. –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω.{Colors.ENDC}\n{Colors.HEADER}–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:{Colors.ENDC}\n{Colors.CYAN}{plan}{Colors.ENDC}", flush=True)
                with open("sloth_plan.txt", "w", encoding='utf-8') as f:
                    f.write(plan)
                print(f"{Colors.OKGREEN}–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'sloth_plan.txt'.{Colors.ENDC}", flush=True)
                raw_files_list = [line.strip() for line in files_list_str.split('\n') if line.strip()]
                project_root_name = os.path.basename(os.getcwd()) + os.sep
                files_to_include_fully = []
                for f_path in raw_files_list:
                    if f_path.startswith(project_root_name):
                        normalized_path = f_path[len(project_root_name):]
                        files_to_include_fully.append(normalized_path)
                        print(f"{Colors.GREY}‚ÑπÔ∏è  –ü—É—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: '{f_path}' -> '{normalized_path}'{Colors.ENDC}", flush=True)
                    else:
                        files_to_include_fully.append(f_path)
                print(f"{Colors.HEADER}–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤:{Colors.ENDC}\n{Colors.CYAN}" + "\n".join(files_to_include_fully) + Colors.ENDC, flush=True)
                state = "EXECUTION"
                current_prompt = None
                current_prompt_type = None
                continue
            else:
                print(f"{Colors.WARNING}‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–∏ –ø–ª–∞–Ω–∞. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...{Colors.ENDC}", flush=True)
                time.sleep(5)
                continue

        elif state == "EXECUTION":
            if extract_block("done_summary", answer_text) or answer_text.strip().upper().startswith("–ì–û–¢–û–í–û"):
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –ï—Å–ª–∏ AI –ø—Ä–∏—Å–ª–∞–ª done_summary, —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ–≥–¥–∞ AI —É–≤–µ—Ä–µ–Ω –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ –æ–±–∑–æ—Ä–∞.
                done_summary = extract_block("done_summary", answer_text) or "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
                final_message = f"{Colors.OKGREEN}{Symbols.CHECK} –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–∑–∞ {iteration_count} –∏—Ç–µ—Ä–∞—Ü–∏–π){Colors.ENDC}"
                update_history_with_attempt(history_file_path, user_goal, done_summary)
                print(f"{Colors.OKGREEN}üìÑ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï:\n{Colors.CYAN}{done_summary}{Colors.ENDC}", flush=True)
                manual_steps = extract_block("manual", answer_text)
                if manual_steps:
                    final_message += f"\n\n{Colors.WARNING}‚úã –¢–†–ï–ë–£–Æ–¢–°–Ø –†–£–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:{Colors.ENDC}\n{manual_steps}"
                break
            
            # --- –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–ô: write_file (–º—É–ª—å—Ç–∏-–±–ª–æ–∫–∏) –∏–ª–∏ bash ---
            commands_to_run = extract_block("bash", answer_text)
            write_blocks = list(_iter_write_file_blocks(answer_text, boundary_token=BOUNDARY_TOKEN))
            strategy_description = extract_block("summary", answer_text) or "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –æ–ø–∏—Å–∞–Ω–∞"
            verify_run_present = (extract_block("verify_run", answer_text) is not None)
            
            action_taken, success, failed_command, error_message = False, False, "N/A", ""

            if write_blocks:
                action_taken = True
                for raw_filepath, content in write_blocks:
                    try:
                        filepath = _normalize_model_path(raw_filepath)
                        print(f"\n{Colors.OKBLUE}üìù –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ write_file. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Ñ–∞–π–ª: {filepath}{Colors.ENDC}", flush=True)
                        dir_name = os.path.dirname(filepath)
                        if dir_name:
                            os.makedirs(dir_name, exist_ok=True)
                        # –ü–∏—à–µ–º –ë–ï–ó strip(), –° –†–û–í–ù–û –¢–ï–ú –°–û–î–ï–†–ñ–ò–ú–´–ú, –ß–¢–û –ü–†–ò–®–õ–û
                        # –ñ—ë—Å—Ç–∫–∏–π —Å—ç–Ω–¥–±–æ–∫—Å: –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
                        abs_path = os.path.realpath(filepath)
                        root_abs = os.path.realpath(os.getcwd())
                        if not abs_path.startswith(root_abs + os.sep):
                            raise RuntimeError(f"–ó–∞–ø—Ä–µ—â—ë–Ω –ø—É—Ç—å –≤–Ω–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞: {filepath}")
                        with open(filepath, "w", encoding="utf-8", newline="") as f:
                            f.write(content)
                        print(f"{Colors.OKGREEN}‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: {filepath}{Colors.ENDC}", flush=True)
                        success = True
                    except Exception as e:
                        print(f"{Colors.FAIL}‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ '{raw_filepath}': {e}{Colors.ENDC}", flush=True)
                        success = False
                        failed_command = f"write_file {raw_filepath}"
                        error_message = str(e)
                        break  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

            elif commands_to_run:
                action_taken = True
                print(f"\n{Colors.OKBLUE}üîß –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ shell-–∫–æ–º–∞–Ω–¥. –í—ã–ø–æ–ª–Ω—è—é...{Colors.ENDC}", flush=True)
                start_cmd_time = time.time()
                success, failed_command, error_message = sloth_runner.execute_commands(commands_to_run)
                cmd_duration = time.time() - start_cmd_time
                timings['commands'] += cmd_duration
                print(f"{Colors.GREY}‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ {cmd_duration:.2f} —Å–µ–∫.{Colors.ENDC}", flush=True)

            if not action_taken:
                print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–º–∞–Ω–¥. –ü—Ä–æ–±—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.{Colors.ENDC}", flush=True)
                project_context, duration = get_project_context(is_fast_mode, files_to_include_fully)
                timings['context'] += duration
                current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history, boundary=BOUNDARY_TOKEN)
                current_prompt_type = "review"
                iteration_count += 1
                continue
            
            project_context, duration = get_project_context(is_fast_mode, files_to_include_fully)
            timings['context'] += duration
            if not project_context:
                final_message = f"{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"
                break

            history_entry = f"**–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}:**\n**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
            if success:
                history_entry += "**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–°–ü–ï–•"
                # –ï—Å–ª–∏ –ò–ò –∑–∞–ø—Ä–æ—Å–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∑–∞–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–±–∏—Ä–∞–µ–º –ª–æ–≥–∏
                if verify_run_present and (verify_command or verify_command == ""):
                    if verify_command:
                        print(f"{Colors.OKBLUE}üß™ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {verify_timeout_seconds} —Å–µ–∫: {verify_command}{Colors.ENDC}", flush=True)
                        start_verify_time = time.time()
                        try:
                            proc = subprocess.Popen(verify_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            try:
                                stdout, stderr = proc.communicate(timeout=verify_timeout_seconds)
                                rc = proc.returncode
                            except subprocess.TimeoutExpired:
                                print(f"{Colors.CYAN}{Symbols.INFO}  –ü—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–ª –¥–æ —Ç–∞–π–º–∞—É—Ç–∞, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å –¥–ª—è dev-—Å–µ—Ä–≤–µ—Ä–∞.{Colors.ENDC}", flush=True)
                                proc.kill()
                                stdout, stderr = proc.communicate()
                                rc = proc.returncode if proc.returncode is not None else 124
                                # stderr –±–æ–ª—å—à–µ –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É, –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        except Exception as e:
                            stdout, stderr, rc = "", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ verify_command: {e}", -1
                        
                        verify_duration = time.time() - start_verify_time
                        timings['verify'] += verify_duration

                        # –û–±—Ä–µ–∑–∞–µ–º –ª–æ–≥–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
                        def _trim(s, lim=log_trim_limit):
                            if not s:
                                return ""
                            return (s[:lim] + "\n...[TRIMMED]...") if len(s) > lim else s
                        logs_collected = f"$ {verify_command}\n(exit={rc})\n\n[STDOUT]\n{_trim(stdout)}\n\n[STDERR]\n{_trim(stderr)}"
                        _log_run(run_log_file_path, "–õ–û–ì–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò", logs_collected)
                        # –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
                        attempts_str = "\n---\n".join(attempt_history) if attempt_history else ""
                        current_prompt = sloth_core.get_log_analysis_prompt(project_context, user_goal, attempts_str, logs_collected, boundary=BOUNDARY_TOKEN)
                        current_prompt_type = "log_analysis"
                    else:
                        print(f"{Colors.GREY}{Symbols.INFO} –ë–ª–æ–∫ verify_run –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫.{Colors.ENDC}", flush=True)
                        current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history, boundary=BOUNDARY_TOKEN)
                        current_prompt_type = "review"
                else:
                    current_prompt = sloth_core.get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history, boundary=BOUNDARY_TOKEN)
                    current_prompt_type = "review"
            else:
                history_entry += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ\n**–û—à–∏–±–∫–∞:** {error_message}"
                current_prompt = sloth_core.get_error_fixing_prompt(
                    failed_command, error_message, user_goal, project_context, iteration_count + 1, attempt_history, boundary=BOUNDARY_TOKEN
                )
                current_prompt_type = "error_fix"
            
            attempt_history.append(history_entry)
            iteration_count += 1
    
    if not final_message:
        final_message = f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π.{Colors.ENDC}"
    
    time_report(timings, total_start_time)
    cost_report(cost_log, total_cost)
    return final_message

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    SLOTH_SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
    parser = argparse.ArgumentParser(description="Sloth: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞.")
    parser.add_argument('--here', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    parser.add_argument('--fix', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏.')
    parser.add_argument('--fast', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å --fix).')
    parser.add_argument('--verify-timeout', type=int, default=None, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (env SLOTH_VERIFY_TIMEOUT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15).')
    parser.add_argument('--log-trim-limit', type=int, default=None, help='–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ stdout/stderr –≤ –ª–æ–≥–∞—Ö (env SLOTH_LOG_TRIM_LIMIT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20000).')
    args = parser.parse_args()

    # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ---
    sloth_core.initialize_model()
    model_instance, _ = sloth_core.get_active_service_details()
    if not model_instance:
        print(f"{Colors.FAIL}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å. "
              f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.{Colors.ENDC}", flush=True)
        sys.exit(1)
    print(f"{Colors.OKGREEN}‚úÖ –ú–æ–¥–µ–ª—å AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.{Colors.ENDC}\n", flush=True)

    # --- 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É ---
    history_file_path = os.path.join(SLOTH_SCRIPT_DIR, HISTORY_FILE_NAME)
    target_project_path, is_fast_mode = "", args.fast

    if args.fix:
        print(f"{Colors.CYAN}{Symbols.GEAR}  –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º --fix. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {history_file_path}...{Colors.ENDC}", flush=True)
        if not os.path.exists(history_file_path):
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –û–®–ò–ë–ö–ê: –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {history_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}", flush=True)
            sys.exit(1)
        try:
            with open(history_file_path, 'r', encoding='utf-8') as f:
                config = json.load(f).get("last_run_config")
            target_project_path, is_fast_mode = config["target_project_path"], config["is_fast_mode"]
            print(f"{Colors.OKGREEN}{Symbols.CHECK} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–µ–∫—Ç: {target_project_path}, –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}.{Colors.ENDC}", flush=True)
        except Exception as e:
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}{Colors.ENDC}", flush=True)
            sys.exit(1)
    else:
        if args.here:
            target_project_path = os.getcwd()
        else:
            print(f"{Colors.OKBLUE}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ...{Colors.ENDC}", flush=True)
            root = Tk(); root.withdraw()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–∞–ø–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (fallback –Ω–∞ DEFAULT_START_DIR), –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞ ‚Äî –¥–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            _cfg_start = sloth_config.get("paths.default_start_dir", DEFAULT_START_DIR)
            _start_dir = _cfg_start if os.path.isdir(_cfg_start) else os.path.expanduser("~")
            target_project_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Sloth", initialdir=_start_dir)
            root.destroy()
        if not target_project_path:
            print(f"{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞.{Colors.ENDC}", flush=True)
            sys.exit(1)
        if os.path.exists(history_file_path):
            os.remove(history_file_path)
        initial_history = {
            "last_run_config": {"target_project_path": target_project_path, "is_fast_mode": is_fast_mode},
            "previous_attempts": []
        }
        with open(history_file_path, 'w', encoding='utf-8') as f:
            json.dump(initial_history, f, indent=2, ensure_ascii=False)
        print(f"{Colors.CYAN}{Symbols.SAVE} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {history_file_path}.{Colors.ENDC}", flush=True)

    # --- 3. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å–∫ ---
    print(f"{Colors.OKGREEN}{Symbols.CHECK} –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {target_project_path}{Colors.ENDC}", flush=True)
    os.chdir(target_project_path)
    run_log_file_path = os.path.join(SLOTH_SCRIPT_DIR, RUN_LOG_FILE_NAME)
    try:
        with open(run_log_file_path, 'w', encoding='utf-8') as f:
            f.write(f"# SLOTH RUN LOG\n# –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç: {target_project_path}\n# –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π' if is_fast_mode else '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π'}\n")
    except Exception as e:
        print(f"{Colors.WARNING}{Symbols.WARNING}  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {run_log_file_path}: {e}{Colors.ENDC}", flush=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –æ–±—Ä–µ–∑–∫–∏ –ª–æ–≥–æ–≤ (CLI ‚Üí ENV ‚Üí default)
    env_verify_timeout = int(os.getenv("SLOTH_VERIFY_TIMEOUT", "15"))
    env_log_trim_limit = int(os.getenv("SLOTH_LOG_TRIM_LIMIT", "20000"))
    verify_timeout_seconds = args.verify_timeout if args.verify_timeout is not None else env_verify_timeout
    log_trim_limit = args.log_trim_limit if args.log_trim_limit is not None else env_log_trim_limit

    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try:
        final_status = main(
            is_fix_mode=args.fix,
            is_fast_mode=is_fast_mode,
            history_file_path=history_file_path,
            run_log_file_path=run_log_file_path,
            verify_timeout_seconds=verify_timeout_seconds,
            log_trim_limit=log_trim_limit,
        )
    except KeyboardInterrupt:
        final_status = f"\n{Colors.OKBLUE}{Symbols.BLUE_DOT} –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        import traceback; traceback.print_exc()
        final_status = f"\n{Colors.BOLD}{Colors.FAIL}{Symbols.CROSS} –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}", flush=True)
        print(f"\n{Colors.BOLD}{Symbols.FLAG} –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}", flush=True)