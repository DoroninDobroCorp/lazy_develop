# –§–∞–π–ª: sloth_log_cleaner.py
import os
import sys
import argparse
from tkinter import Tk, filedialog

from colors import Colors, Symbols

SLOTH_TAG = "[SLOTHLOG]"


def is_probably_text(filepath, blocksize=1024):
    """
    –ì—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –±–ª–æ–∫ –≤ utf-8.
    –ï—Å–ª–∏ —É–¥–∞—ë—Ç—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º.
    """
    try:
        with open(filepath, 'rb') as f:
            chunk = f.read(blocksize)
        chunk.decode('utf-8')
        return True
    except Exception:
        return False


def clean_file(filepath: str, tag: str, backup: bool) -> tuple[int, bool]:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ tag, –∏–∑ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É–¥–∞–ª—ë–Ω–Ω—ã—Ö_—Å—Ç—Ä–æ–∫, –±—ã–ª_–∏–∑–º–µ–Ω—ë–Ω_—Ñ–∞–π–ª)
    """
    if not os.path.isfile(filepath):
        return 0, False

    if not is_probably_text(filepath):
        return 0, False

    try:
        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
    except Exception:
        return 0, False

    total = len(lines)
    kept = [ln for ln in lines if tag not in ln]
    removed = total - len(kept)

    if removed > 0:
        try:
            if backup:
                try:
                    with open(filepath + '.bak', 'w', encoding='utf-8') as fb:
                        fb.writelines(lines)
                except Exception as e:
                    print(f"{Colors.WARNING}{Symbols.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å backup –¥–ª—è {filepath}: {e}{Colors.ENDC}")
            with open(filepath, 'w', encoding='utf-8') as f:
                f.writelines(kept)
            return removed, True
        except Exception as e:
            print(f"{Colors.FAIL}{Symbols.CROSS} –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}{Colors.ENDC}")
            return 0, False
    return 0, False


def walk_and_clean(root_dir: str, tag: str, backup: bool) -> tuple[int, int, int]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —á–∏—Å—Ç–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ_—Ñ–∞–π–ª–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–æ_—Ñ–∞–π–ª–æ–≤, —É–¥–∞–ª–µ–Ω–æ_—Å—Ç—Ä–æ–∫)
    """
    processed = 0
    changed = 0
    removed_total = 0
    for base, _dirs, files in os.walk(root_dir):
        for name in files:
            path = os.path.join(base, name)
            processed += 1
            removed, modified = clean_file(path, tag, backup)
            removed_total += removed
            if modified:
                changed += 1
                print(f"{Colors.OKGREEN}{Symbols.CHECK} –û–±–Ω–æ–≤–ª—ë–Ω: {path} (‚àí{removed} —Å—Ç—Ä–æ–∫ —Å {tag}){Colors.ENDC}")
    return processed, changed, removed_total


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Sloth Log Cleaner: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å [SLOTHLOG] –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.')
    parser.add_argument('--here', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞.')
    parser.add_argument('--backup', action='store_true', help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å .bak –∫–æ–ø–∏–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.')
    parser.add_argument('--tag', type=str, default=SLOTH_TAG, help='–ü—Ä–µ—Ñ–∏–∫—Å –ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [SLOTHLOG]).')
    args = parser.parse_args()

    if args.here:
        target_dir = os.getcwd()
    else:
        print(f"{Colors.OKBLUE}–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ {SLOTH_TAG}...{Colors.ENDC}")
        root = Tk(); root.withdraw()
        target_dir = filedialog.askdirectory(title='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤')
        root.destroy()

    if not target_dir:
        print(f"{Colors.FAIL}{Symbols.CROSS} –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã—Ö–æ–¥.{Colors.ENDC}")
        sys.exit(1)

    if not os.path.isdir(target_dir):
        print(f"{Colors.FAIL}{Symbols.CROSS} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {target_dir}{Colors.ENDC}")
        sys.exit(1)

    print(f"{Colors.HEADER}{Symbols.SPINNER} –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –≤: {target_dir}{Colors.ENDC}")
    processed, changed, removed_total = walk_and_clean(target_dir, args.tag, args.backup)

    print("\n" + "="*80)
    print(f"{Colors.BOLD}üìä –ò—Ç–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏:{Colors.ENDC}")
    print(f"  –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    print(f"  –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ:   {changed}")
    print(f"  –°—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ:     {removed_total}")
    print("="*80)
